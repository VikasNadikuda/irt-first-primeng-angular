import { Component, Input, OnInit } from '@angular/core';
import {Organisation} from './organisation'
import {OrganisationsService} from '../../../services/organisations.service'
import * as FileSaver from 'file-saver';
import { ToastrService } from 'ngx-toastr';
import {Router} from '@angular/router'
import { NgxSpinnerService } from 'ngx-spinner';
import { BlockUI, NgBlockUI } from 'ng-block-ui';
const { jsPDF } = require("jspdf");
require('jspdf-autotable');
import { DatePipe } from '@angular/common';

@Component({
  selector: 'app-view-organisations',
  templateUrl: './view-organisations.component.html',
  styleUrls: ['./view-organisations.component.css']
})
export class ViewOrganisationsComponent implements OnInit {
  @BlockUI('viewOrg') loader: NgBlockUI;

  organisations: Organisation[]=[]
  statuses: any[];
  _selectedColumns: any[];
  colum:any[]=[]
  headers:any=[]
  display=false
  loading: boolean = true;
  
  constructor(
    private organisationService: OrganisationsService,
    private toastr:ToastrService,
    private router:Router,
    private spinner:NgxSpinnerService,
    private datePipe: DatePipe

    ) { }
  cols :any= [];
  ngOnInit(): void {
  // this.loader.start();
  this.cols = [
    { field: 'Country_Name', header: 'Country' },
    { field: 'State_Name', header: 'State' },
    { field: 'Status', header: 'Status' }
  ];
  for(let i=0;i<this.cols.length;i++){
    this.colum.push(this.cols[i].field)
    this.headers.push(this.cols[i].header)

  }
  this._selectedColumns = this.cols;

    this.organisationService.getOrganisations().subscribe(
      (success)=>{
        this.loader.stop();
        console.log(success)
        this.loading=false
          if(success.Table1!=undefined && success.Table1?.length!=0){
              this.organisations=success.Table1
          }
          else{
            this.organisations=[]
          }
      },
      (error)=>{
        this.loading=false
        console.log(error)
        this.loader.stop();
        this.toastr.error("", error.message,{
          positionClass:'toast-top-center',   disableTimeOut:true,tapToDismiss:false,closeButton:true
        });
      }
    )
    this.viewObj=this.organisations[0]
  }
ngOnDestroy(){
  this.toastr.clear()
}


viewObj
viewOrganisation(obj){
  this.display=true
  this.viewObj=obj
} 

@Input() get selectedColumns(): any[] {
  return this._selectedColumns;
}

set selectedColumns(val: any[]) {
  //restore original order
  this.colum=[]
  this._selectedColumns = this.cols.filter(col => val.includes(col));
  for(let i=0;i<this._selectedColumns.length;i++){
      this.colum.push(this._selectedColumns[i].field)
  }
  console.log(this._selectedColumns)
 
}
editOrganisation(data){
  console.log(data)
  this.router.navigate(['master/manageOrganisation/addOrEditOrganisation'],{state:{organisation:data}})
}
exportPdf() {
  const doc = new jsPDF();
  const rows=[]
  let temp=[]
  let columns=[]
  columns=JSON.parse(JSON.stringify(this.colum));
  columns.unshift('Organization_Name')
  columns.unshift('Organization_ID')
  this.headers.unshift('Organization Name')
  this.headers.unshift('Organization ID')
  this.organisations.forEach(element => {
    temp=[]
    for(let i=0;i<columns.length;i++){
      if(columns[i]=='Status'){
        if(element[columns[i]]==1){
          temp.push('Active')
        }
        else{
          temp.push('Inactive')
        }
      }
      else{
        temp.push(element[columns[i]])
      }
    }
    rows.push(temp);
  });
  console.log(rows)
  doc.autoTable({body:rows,columns:this.headers})
  doc.save('organisations.pdf');

}
exportExcel(type) {
  let data=[]
  let columns=[]
  columns=JSON.parse(JSON.stringify(this.colum));
  columns.unshift('Organization_Name')
  columns.unshift('Organization_ID')
  this.headers.unshift('Organization Name')
  this.headers.unshift('Organization ID')

    this.organisations.forEach(element =>  {
    let obj:any={}
    for(let i=0;i<columns.length;i++){
      if(columns[i]=='Status'){
        if(element[columns[i]]==1){
          obj[this.headers[i]]='Active'
        }
        else{
          obj[this.headers[i]]='Inactive'

       }
      }
      else{
        obj[this.headers[i]]=element[columns[i]]      

      }
    }
    data.push(obj);
  });
  console.log(data)
  const userObject= JSON.parse(localStorage.getItem('currentUser'));

    import("xlsx").then(xlsx => {
      var worksheet = xlsx.utils.aoa_to_sheet([
        ["Generated By :",userObject?.name],
        ['Generated on:',this.datePipe.transform(new Date(),'MMMM d, y, h:mm:ss a')] 

      ]);
      xlsx.utils.sheet_add_json(worksheet, data, {header:this.headers, origin:"A6"});
        // const worksheet = xlsx.utils.json_to_sheet(data);
        const workbook = { Sheets: { 'data': worksheet }, SheetNames: ['data'] };
        const excelBuffer: any = xlsx.write(workbook, { bookType: type, type: 'array' });
        this.saveAsExcelFile(excelBuffer, "organisations",type);
    });
}

saveAsExcelFile(buffer: any, fileName: string,type:string): void {
    let EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';
    let EXCEL_EXTENSION = '.'+type;
    const data: Blob = new Blob([buffer], {
        type: EXCEL_TYPE
    });
    FileSaver.saveAs(data, fileName  + EXCEL_EXTENSION);
}
}
